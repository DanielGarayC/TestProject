<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <title>Medición de Aceleración</title>
    <link rel="stylesheet" href="/assets/vendors/mdi/css/materialdesignicons.min.css" />
    <link rel="stylesheet" href="/assets/vendors/flag-icon-css/css/flag-icon.min.css" />
    <link rel="stylesheet" href="/assets/vendors/css/vendor.bundle.base.css" />
    <link rel="stylesheet" href="/assets/vendors/font-awesome/css/font-awesome.min.css" />
    <link rel="stylesheet" href="/assets/vendors/bootstrap-datepicker/bootstrap-datepicker.min.css" />
    <link rel="stylesheet" href="/assets/css/style.css" />
    <link rel="shortcut icon" href="/assets/images/favicon.png" />
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/heatmap.js"></script>

    <style>
        .content-wrapper{
            overflow-y: scroll !important; /* Asegura que haya scroll si es necesario */
          }
          #graficosModal {
            width: 100%;
            height: auto;
            overflow: auto;
          }
    </style>
  </head>
  <body>
    <div class="container-scroller">
      <nav class="sidebar sidebar-offcanvas" id="sidebar">
        <div class="text-center sidebar-brand-wrapper d-flex align-items-center">
        </div>
        <ul class="nav">
          <li class="nav-item">
            <a class="nav-link" href="/pagPrincipal">
              <i class="mdi mdi-home menu-icon"></i>
              <span class="menu-title">Inicio</span>
            </a>
          </li>
        </ul>
      </nav>
      <div class="container-fluid page-body-wrapper">
        <div id="theme-settings" class="settings-panel">
          <i class="settings-close mdi mdi-close"></i>
          <p class="settings-heading">SIDEBAR SKINS</p>
          <div class="sidebar-bg-options selected" id="sidebar-default-theme">
            <div class="img-ss rounded-circle bg-light border mr-3"></div> Default
          </div>
          <div class="sidebar-bg-options" id="sidebar-dark-theme">
            <div class="img-ss rounded-circle bg-dark border mr-3"></div> Dark
          </div>
          <p class="settings-heading mt-2">HEADER SKINS</p>
          <div class="color-tiles mx-0 px-4">
            <div class="tiles light"></div>
            <div class="tiles dark"></div>
          </div>
        </div>
        <nav class="navbar col-lg-12 col-12 p-lg-0 fixed-top d-flex flex-row">
          <div class="navbar-menu-wrapper d-flex align-items-stretch justify-content-between">
            <a class="navbar-brand brand-logo-mini align-self-center d-lg-none" href="index.html"><img src="/assets/images/logo-mini.svg" alt="logo" /></a>
            <button class="navbar-toggler navbar-toggler align-self-center mr-2" type="button" data-toggle="minimize">
              <i class="mdi mdi-menu"></i>
            </button>
            
           
            <button class="navbar-toggler navbar-toggler-right d-lg-none align-self-center" type="button" data-toggle="offcanvas">
              <span class="mdi mdi-menu"></span>
            </button>
          </div>
        </nav>
        <div class="main-panel">
            <div class="content-wrapper pb-0">

                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="mb-0">Mediciones Detalladas</h1>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalGraficas">
                      Ver Gráficas PSD, FDD y Espectrograma
                    </button>
                    <a href="/tipoMedicion/1" class="btn btn-info">Regresar</a>
                    
                </div>
                <p>
                    Medición de: 
                    <%= new Date(medicionTipo1.fecha_hora).toLocaleDateString('es-PE', { 
                      weekday: 'long', 
                      year: 'numeric', 
                      month: 'long', 
                      day: 'numeric' 
                    }).replace(',', '').replace(/^\w/, c => c.toUpperCase()) %> a las 
                    <%= new Date(medicionTipo1.fecha_hora).toLocaleTimeString('es-PE', { 
                      hour: '2-digit', 
                      minute: '2-digit', 
                      second: '2-digit' 
                    }) %>
                  </p>
                <div id="data-container"></div>
                <div id="graficos"></div>
                <div class="sensor-values">
                  <h3>Valores Registrados</h3>
                  <p><strong><%= valorTemperatura.nombre %>: </strong><%= valorTemperatura.valor %></p>
                  <p><strong><%= valorHumedad.nombre %>: </strong><%= valorHumedad.valor %></p>
              </div>
                
              <!-- Modal -->
              <div class="modal fade" id="modalGraficas" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="modalLabel">Gráficas PSD, FDD y Espectrograma</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <!-- Contenedores para las gráficas -->
                            <div id="graficosModal"></div>
                        </div>
                    </div>
                </div>
              </div>
            </div>
        </div>
        <!-- main-panel ends -->
      </div>
      <!-- page-body-wrapper ends -->
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- container-scroller -->
    <script>
      // Parsear datos del backend
      const dataTipo1 = JSON.parse('<%- JSON.stringify(medicionTipo1.data_sensors || []) %>');
      const psdData = JSON.parse('<%- JSON.stringify(psdData || []) %>');
      const fddData = JSON.parse('<%- JSON.stringify(fddData || []) %>');
      const spectrogramData = JSON.parse('<%- JSON.stringify(spectrogramData || []) %>');


      // Función para procesar y agrupar datos por sensor
      function procesarDatos(datos) {
          return datos.reduce((acc, medicion) => {
              const sensorId = medicion.sensor.idSensor;
              if (!acc[sensorId]) {
                  acc[sensorId] = [];
              }
              acc[sensorId].push(medicion);
              return acc;
          }, {});
      }
  
      //Reducir data pal espectrograma
      function reducirEspectrograma(spectrogram, maxRows, maxCols) {
          const filasReducidas = spectrogram.length > maxRows
              ? spectrogram.filter((_, index) => index % Math.ceil(spectrogram.length / maxRows) === 0)
              : spectrogram;

          return filasReducidas.map(row => {
              if (row.length > maxCols) {
                  return row.filter((_, index) => index % Math.ceil(row.length / maxCols) === 0);
              }
              return row;
          });
      }

      // Crear gráficos dinámicamente para los datos de sensores
      function crearGraficosSensores(datosPorSensor, tipo) {
          const graficosDiv = document.getElementById('graficos');
          graficosDiv.innerHTML = ''; // Limpiar contenedor
  
          Object.keys(datosPorSensor).forEach(sensorId => {
              const sensorData = datosPorSensor[sensorId];
              const valores = sensorData.map(medicion => medicion.valor);
              const indices = sensorData.map((_, i) => i + 1);
  
              // Crear un contenedor para cada gráfico
              const graficoDiv = document.createElement('div');
              graficoDiv.style.width = '100%';
              graficoDiv.style.height = '400px';
              graficosDiv.appendChild(graficoDiv);
  
              // Inicializar el gráfico
              Highcharts.chart(graficoDiv, {
                  chart: { type: 'line', height: 400 },
                  title: { text: `Mediciones Tipo ${tipo} - Sensor ${sensorId}` },
                  xAxis: { categories: indices, title: { text: 'Index' } },
                  yAxis: { title: { text: 'Valor' } },
                  series: [{ name: `Sensor ${sensorId}`, data: valores, lineWidth: 1 }],
              });
          });
      }
  
      // Crear gráficos dinámicamente para los análisis
      function crearGraficosAnalisis(psdData, fddData, spectrogramData) {
    const graficosDiv = document.getElementById('graficosModal');
    graficosDiv.innerHTML = ''; // Limpiar contenedor

    // Gráfico de PSD
    psdData.forEach(sensor => {
        const containerPSD = document.createElement('div');
        containerPSD.style.width = '100%';
        containerPSD.style.height = '400px';
        graficosDiv.appendChild(containerPSD);

        Highcharts.chart(containerPSD, {
            chart: { type: 'line' },
            title: { text: `Sensor ${sensor.sensorId} - PSD` },
            xAxis: { title: { text: 'Frecuencia (Hz)' } },
            yAxis: { title: { text: 'Amplitud (dB)' } },
            series: [{ name: 'PSD', data: sensor.psd }],
        });
    });

    // Gráfico de FDD
    fddData.forEach(sensor => {
        const containerFDD = document.createElement('div');
        containerFDD.style.width = '100%';
        containerFDD.style.height = '400px';
        graficosDiv.appendChild(containerFDD);

        Highcharts.chart(containerFDD, {
            chart: { type: 'column' },
            title: { text: `Sensor ${sensor.sensorId} - FDD` },
            xAxis: { categories: ['Frecuencia Dominante'], title: { text: '' } },
            yAxis: { title: { text: 'Frecuencia (Hz)' } },
            series: [{ name: 'FDD', data: [sensor.fdd] }],
        });
    });

    

    // Gráfico de Espectrograma
    const maxRows = 100; // Máximo de filas para el espectrograma
    const maxCols = 100; // Máximo de columnas para el espectrograma

    spectrogramData.forEach(sensor => {
        if (!Array.isArray(sensor.spectrogram) || sensor.spectrogram.length === 0 || 
            !sensor.spectrogram.every(row => Array.isArray(row))) {
            console.error(`Espectrograma no válido para el sensor ${sensor.sensorId}`);
            return; // Salir si el espectrograma no es válido
        }
        const containerSpectrogram = document.createElement('div');
        containerSpectrogram.style.width = '100%';
        containerSpectrogram.style.height = '400px';
        graficosDiv.appendChild(containerSpectrogram);


        if (!Array.isArray(sensor.spectrogram) || sensor.spectrogram.length === 0) {
            console.error(`Espectrograma vacío o inválido para el sensor ${sensor.sensorId}`);
            return;
        }

        const spectrogramReducido = reducirEspectrograma(sensor.spectrogram, maxRows, maxCols);

        const spectrogramValues = [];
        for (let x = 0; x < spectrogramReducido.length; x++) {
            for (let y = 0; y < spectrogramReducido[x].length; y++) {
                spectrogramValues.push({ x, y, value: spectrogramReducido[x][y] });
            }
        }

        console.log(spectrogramValues);

        const minValue = Math.min(...spectrogramValues.map(d => d.value));
        const maxValue = Math.max(...spectrogramValues.map(d => d.value));

        Highcharts.chart(containerSpectrogram, {
            chart: { type: 'heatmap' },
            title: { text: `Sensor ${sensor.sensorId} - Espectrograma` },
            xAxis: { title: { text: 'Tiempo (s)' } },
            yAxis: { title: { text: 'Frecuencia (Hz)' } },
            colorAxis: {
                min: Math.min(...spectrogramValues.map(d => d.value)) || 0,
                max: Math.max(...spectrogramValues.map(d => d.value)) || 1,
                stops: [
                    [0, '#3060cf'],
                    [0.5, '#fffbbc'],
                    [1, '#c4463a'],
                ],
            },
            series: [{
                name: 'Spectrogram',
                borderWidth: 1,
                data: spectrogramValues,
                dataLabels: { enabled: false },
              }],
        });
    });
}
  
      // Procesar datos y crear gráficos para los sensores
      crearGraficosSensores(procesarDatos(dataTipo1), 1);
  
      // Evento al abrir el modal
      const modalElement = document.getElementById('modalGraficas');
      modalElement.addEventListener('shown.bs.modal', () => {
          console.log('Modal abierto, cargando gráficos...');
          crearGraficosAnalisis(psdData, fddData, spectrogramData); // Crear gráficas de análisis cuando se abra el modal
      });
  </script>
    <!-- plugins:js -->
    <script src="/assets/vendors/js/vendor.bundle.base.js"></script>
    <!-- endinject -->
    <!-- Plugin js for this page -->
    <script src="/assets/vendors/chart.js/Chart.min.js"></script>
    <script src="/assets/vendors/bootstrap-datepicker/bootstrap-datepicker.min.js"></script>
    <script src="/assets/vendors/flot/jquery.flot.js"></script>
    <script src="/assets/vendors/flot/jquery.flot.resize.js"></script>
    <script src="/assets/vendors/flot/jquery.flot.categories.js"></script>
    <script src="/assets/vendors/flot/jquery.flot.fillbetween.js"></script>
    <script src="/assets/vendors/flot/jquery.flot.stack.js"></script>
    <script src="/assets/vendors/flot/jquery.flot.pie.js"></script>
    <!-- End plugin js for this page -->
    <!-- inject:js -->
    <script src="/assets/js/off-canvas.js"></script>
    <script src="/assets/js/hoverable-collapse.js"></script>
    <script src="/assets/js/misc.js"></script>

  </body>
</html>
